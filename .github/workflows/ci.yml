name: build

on:
  push:
  schedule:
    - cron:  '0 0 1 * *'

jobs:
  ffmpeg:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build ffmpeg version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:ffmpeg"
          tags: maxcanna/ffmpeg:version
          load: true
      - name: Detect ffmpeg version
        run: |
          echo FFMPEG_VERSION=$(docker run --rm maxcanna/ffmpeg:version -version | xargs | cut -d ' ' -f 3) >> $GITHUB_ENV
      - name: Build ffmpeg
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:ffmpeg"
          tags: maxcanna/ffmpeg:latest,maxcanna/ffmpeg:${{ env.FFMPEG_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
  subliminal:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build subliminal version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:subliminal"
          tags: maxcanna/subliminal:version
          load: true
      - name: Detect subliminal version
        run: |
          echo SUBLIMINAL_VERSION=$(docker run --rm maxcanna/subliminal:version --version | cut -d ' ' -f 3) >> $GITHUB_ENV
      - name: Build subliminal
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:subliminal"
          tags: maxcanna/subliminal:latest,maxcanna/subliminal:${{ env.SUBLIMINAL_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
  caddy:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Detect caddy version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:caddy"
          tags: maxcanna/caddy:version
          load: true
      - name: Export caddy version
        run: |
          echo CADDY_VERSION=$(docker run --rm maxcanna/caddy:version version | cut -d ' ' -f 1) >> $GITHUB_ENV
      - name: Build caddy
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:caddy"
          tags: maxcanna/caddy:latest,maxcanna/caddy:${{ env.CADDY_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
  transmission:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build transmission version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:transmission"
          tags: maxcanna/transmission:version
          load: true
      - name: Detect transmission version
        run: |
          echo TRANSMISSION_VERSION=$(docker run --rm maxcanna/transmission:version --version 2>&1 | xargs | cut -d ' ' -f 2) >> $GITHUB_ENV
      - name: Build transmission
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:transmission"
          tags: maxcanna/transmission:latest,maxcanna/transmission:${{ env.TRANSMISSION_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
  minidlna:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build minidlna version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:minidlna"
          tags: maxcanna/minidlna:version
          load: true
      - name: Detect minidlna version
        run: |
          echo MINIDLNA_VERSION=$(docker run --rm maxcanna/minidlna:version -V | cut -d ' ' -f 2) >> $GITHUB_ENV
      - name: Build minidlna
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:minidlna"
          tags: maxcanna/minidlna:latest,maxcanna/minidlna:${{ env.MINIDLNA_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
  openvpn:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build openvpn version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:openvpn"
          tags: maxcanna/openvpn:version
          load: true
      - name: Detect openvpn version
        run: |
          echo OPENVPN_VERSION=$(docker run --rm --entrypoint openvpn maxcanna/openvpn:version --version | xargs | cut -d ' ' -f 2) >> $GITHUB_ENV
      - name: Build openvpn
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:openvpn"
          tags: maxcanna/openvpn:latest,maxcanna/openvpn:${{ env.OPENVPN_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
  cloudflared:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: |
          echo DOCKER_PUSH=$([[ $GITHUB_REF == *"master"* ]] && echo "true" || echo "false") >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build cloudflared version
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:cloudflared"
          tags: maxcanna/cloudflared:version
          load: true
      - name: Detect cloudflared version
        run: |
          echo CLOUDFLARED_VERSION=$(docker run --rm maxcanna/cloudflared:version version | cut -d ' ' -f 3) >> $GITHUB_ENV
      - name: Build cloudflared
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:cloudflared"
          tags: maxcanna/cloudflared:latest,maxcanna/cloudflared:${{ env.CLOUDFLARED_VERSION }}
          push: ${{ env.DOCKER_PUSH }}
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6
